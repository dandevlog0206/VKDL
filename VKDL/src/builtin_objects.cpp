#include "../include/vkdl/core/builtin_objects.h"

#include "../include/vkdl/core/context.h"
#include "../include/vkdl/builder/renderpass_builder.h"
#include "../include/vkdl/builder/pipeline_layout_builder.h"
#include "../include/vkdl/builder/pipeline_builder.h"
#include "../include/vkdl/builder/descriptor_set_layout_builder.h"
#include "../include/vkdl/math/transform_2d.h"
#include "../include/vkdl/graphics/vertex.h"

/*
#version 450 core

layout(location = 0) in vec2 Pos;
layout(location = 1) in vec2 UV;
layout(location = 2) in vec4 Color;
layout(push_constant) uniform PushConstant { mat3x3 transform; vec2 texture_res; } pc;

out gl_PerVertex { vec4 gl_Position; };
layout(location = 0) out struct { vec4 Color; vec2 UV; } Out;

void main()
{
	vec3 vert   = pc.transform * vec3(Pos, 1);
	gl_Position = vec4(vert.x / vert.z, vert.y / vert.z, 0, 1);

	Out.Color = Color;
	Out.UV    = UV / pc.texture_res;
}
*/
static const uint32_t __glsl_shader0_vert_spv[] =
{
	0x07230203,0x00010000,0x0008000b,0x00000043,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x000a000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x00000015,0x0000001f,0x00000035,
	0x00000037,0x0000003b,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00040005,0x00000009,0x74726576,0x00000000,0x00060005,0x0000000c,0x68737550,
	0x736e6f43,0x746e6174,0x00000000,0x00060006,0x0000000c,0x00000000,0x6e617274,0x726f6673,
	0x0000006d,0x00060006,0x0000000c,0x00000001,0x74786574,0x5f657275,0x00736572,0x00030005,
	0x0000000e,0x00006370,0x00030005,0x00000015,0x00736f50,0x00060005,0x0000001d,0x505f6c67,
	0x65567265,0x78657472,0x00000000,0x00060006,0x0000001d,0x00000000,0x505f6c67,0x7469736f,
	0x006e6f69,0x00030005,0x0000001f,0x00000000,0x00030005,0x00000033,0x00000000,0x00050006,
	0x00000033,0x00000000,0x6f6c6f43,0x00000072,0x00040006,0x00000033,0x00000001,0x00005655,
	0x00030005,0x00000035,0x0074754f,0x00040005,0x00000037,0x6f6c6f43,0x00000072,0x00030005,
	0x0000003b,0x00005655,0x00040048,0x0000000c,0x00000000,0x00000005,0x00050048,0x0000000c,
	0x00000000,0x00000023,0x00000000,0x00050048,0x0000000c,0x00000000,0x00000007,0x00000010,
	0x00050048,0x0000000c,0x00000001,0x00000023,0x00000030,0x00030047,0x0000000c,0x00000002,
	0x00040047,0x00000015,0x0000001e,0x00000000,0x00050048,0x0000001d,0x00000000,0x0000000b,
	0x00000000,0x00030047,0x0000001d,0x00000002,0x00040047,0x00000035,0x0000001e,0x00000000,
	0x00040047,0x00000037,0x0000001e,0x00000002,0x00040047,0x0000003b,0x0000001e,0x00000001,
	0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,
	0x00040017,0x00000007,0x00000006,0x00000003,0x00040020,0x00000008,0x00000007,0x00000007,
	0x00040018,0x0000000a,0x00000007,0x00000003,0x00040017,0x0000000b,0x00000006,0x00000002,
	0x0004001e,0x0000000c,0x0000000a,0x0000000b,0x00040020,0x0000000d,0x00000009,0x0000000c,
	0x0004003b,0x0000000d,0x0000000e,0x00000009,0x00040015,0x0000000f,0x00000020,0x00000001,
	0x0004002b,0x0000000f,0x00000010,0x00000000,0x00040020,0x00000011,0x00000009,0x0000000a,
	0x00040020,0x00000014,0x00000001,0x0000000b,0x0004003b,0x00000014,0x00000015,0x00000001,
	0x0004002b,0x00000006,0x00000017,0x3f800000,0x00040017,0x0000001c,0x00000006,0x00000004,
	0x0003001e,0x0000001d,0x0000001c,0x00040020,0x0000001e,0x00000003,0x0000001d,0x0004003b,
	0x0000001e,0x0000001f,0x00000003,0x00040015,0x00000020,0x00000020,0x00000000,0x0004002b,
	0x00000020,0x00000021,0x00000000,0x00040020,0x00000022,0x00000007,0x00000006,0x0004002b,
	0x00000020,0x00000025,0x00000002,0x0004002b,0x00000020,0x00000029,0x00000001,0x0004002b,
	0x00000006,0x0000002f,0x00000000,0x00040020,0x00000031,0x00000003,0x0000001c,0x0004001e,
	0x00000033,0x0000001c,0x0000000b,0x00040020,0x00000034,0x00000003,0x00000033,0x0004003b,
	0x00000034,0x00000035,0x00000003,0x00040020,0x00000036,0x00000001,0x0000001c,0x0004003b,
	0x00000036,0x00000037,0x00000001,0x0004002b,0x0000000f,0x0000003a,0x00000001,0x0004003b,
	0x00000014,0x0000003b,0x00000001,0x00040020,0x0000003d,0x00000009,0x0000000b,0x00040020,
	0x00000041,0x00000003,0x0000000b,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,
	0x000200f8,0x00000005,0x0004003b,0x00000008,0x00000009,0x00000007,0x00050041,0x00000011,
	0x00000012,0x0000000e,0x00000010,0x0004003d,0x0000000a,0x00000013,0x00000012,0x0004003d,
	0x0000000b,0x00000016,0x00000015,0x00050051,0x00000006,0x00000018,0x00000016,0x00000000,
	0x00050051,0x00000006,0x00000019,0x00000016,0x00000001,0x00060050,0x00000007,0x0000001a,
	0x00000018,0x00000019,0x00000017,0x00050091,0x00000007,0x0000001b,0x00000013,0x0000001a,
	0x0003003e,0x00000009,0x0000001b,0x00050041,0x00000022,0x00000023,0x00000009,0x00000021,
	0x0004003d,0x00000006,0x00000024,0x00000023,0x00050041,0x00000022,0x00000026,0x00000009,
	0x00000025,0x0004003d,0x00000006,0x00000027,0x00000026,0x00050088,0x00000006,0x00000028,
	0x00000024,0x00000027,0x00050041,0x00000022,0x0000002a,0x00000009,0x00000029,0x0004003d,
	0x00000006,0x0000002b,0x0000002a,0x00050041,0x00000022,0x0000002c,0x00000009,0x00000025,
	0x0004003d,0x00000006,0x0000002d,0x0000002c,0x00050088,0x00000006,0x0000002e,0x0000002b,
	0x0000002d,0x00070050,0x0000001c,0x00000030,0x00000028,0x0000002e,0x0000002f,0x00000017,
	0x00050041,0x00000031,0x00000032,0x0000001f,0x00000010,0x0003003e,0x00000032,0x00000030,
	0x0004003d,0x0000001c,0x00000038,0x00000037,0x00050041,0x00000031,0x00000039,0x00000035,
	0x00000010,0x0003003e,0x00000039,0x00000038,0x0004003d,0x0000000b,0x0000003c,0x0000003b,
	0x00050041,0x0000003d,0x0000003e,0x0000000e,0x0000003a,0x0004003d,0x0000000b,0x0000003f,
	0x0000003e,0x00050088,0x0000000b,0x00000040,0x0000003c,0x0000003f,0x00050041,0x00000041,
	0x00000042,0x00000035,0x0000003a,0x0003003e,0x00000042,0x00000040,0x000100fd,0x00010038
};

/*
#version 450 core

layout(location = 0) out vec4 fColor;
layout(set=0, binding=0) uniform sampler2D sTexture;
layout(location = 0) in struct { vec4 Color; vec2 UV; } In;

void main()
{
	fColor = In.Color * texture(sTexture, In.UV.st);
}
*/
static const uint32_t __glsl_shader0_frag_spv[] =
{
	0x07230203,0x00010000,0x0008000b,0x0000001e,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000d,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00040005,0x00000009,0x6c6f4366,0x0000726f,0x00030005,0x0000000b,0x00000000,
	0x00050006,0x0000000b,0x00000000,0x6f6c6f43,0x00000072,0x00040006,0x0000000b,0x00000001,
	0x00005655,0x00030005,0x0000000d,0x00006e49,0x00050005,0x00000016,0x78655473,0x65727574,
	0x00000000,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000d,0x0000001e,
	0x00000000,0x00040047,0x00000016,0x00000022,0x00000000,0x00040047,0x00000016,0x00000021,
	0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
	0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,
	0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00040017,0x0000000a,0x00000006,
	0x00000002,0x0004001e,0x0000000b,0x00000007,0x0000000a,0x00040020,0x0000000c,0x00000001,
	0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000001,0x00040015,0x0000000e,0x00000020,
	0x00000001,0x0004002b,0x0000000e,0x0000000f,0x00000000,0x00040020,0x00000010,0x00000001,
	0x00000007,0x00090019,0x00000013,0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,
	0x00000001,0x00000000,0x0003001b,0x00000014,0x00000013,0x00040020,0x00000015,0x00000000,
	0x00000014,0x0004003b,0x00000015,0x00000016,0x00000000,0x0004002b,0x0000000e,0x00000018,
	0x00000001,0x00040020,0x00000019,0x00000001,0x0000000a,0x00050036,0x00000002,0x00000004,
	0x00000000,0x00000003,0x000200f8,0x00000005,0x00050041,0x00000010,0x00000011,0x0000000d,
	0x0000000f,0x0004003d,0x00000007,0x00000012,0x00000011,0x0004003d,0x00000014,0x00000017,
	0x00000016,0x00050041,0x00000019,0x0000001a,0x0000000d,0x00000018,0x0004003d,0x0000000a,
	0x0000001b,0x0000001a,0x00050057,0x00000007,0x0000001c,0x00000017,0x0000001b,0x00050085,
	0x00000007,0x0000001d,0x00000012,0x0000001c,0x0003003e,0x00000009,0x0000001d,0x000100fd,
	0x00010038
};

/*
#version 450 core

layout(location = 0) in vec2 Pos;
layout(location = 1) in vec4 Color;
layout(push_constant) uniform PushConstant { mat3x3 transform; } pc;

out gl_PerVertex { vec4 gl_Position; };
layout(location = 0) out vec4 outColor;

void main()
{
	vec3 vert   = pc.transform * vec3(Pos, 1);
	gl_Position = vec4(vert.x / vert.z, vert.y / vert.z, 0, 1);

	outColor = Color;
}
*/
static const uint32_t __glsl_shader1_vert_spv[] =
{
	0x07230203, 0x00010000, 0x0008000b, 0x00000037, 0x00000000, 0x00020011, 0x00000001, 0x0006000b,
	0x00000001, 0x4c534c47, 0x6474732e, 0x3035342e, 0x00000000, 0x0003000e, 0x00000000, 0x00000001,
	0x0009000f, 0x00000000, 0x00000004, 0x6e69616d, 0x00000000, 0x00000015, 0x0000001f, 0x00000033,
	0x00000035, 0x00030003, 0x00000002, 0x000001c2, 0x00040005, 0x00000004, 0x6e69616d, 0x00000000,
	0x00040005, 0x00000009, 0x74726576, 0x00000000, 0x00060005, 0x0000000b, 0x68737550, 0x736e6f43,
	0x746e6174, 0x00000000, 0x00060006, 0x0000000b, 0x00000000, 0x6e617274, 0x726f6673, 0x0000006d,
	0x00030005, 0x0000000d, 0x00006370, 0x00030005, 0x00000015, 0x00736f50, 0x00060005, 0x0000001d,
	0x505f6c67, 0x65567265, 0x78657472, 0x00000000, 0x00060006, 0x0000001d, 0x00000000, 0x505f6c67,
	0x7469736f, 0x006e6f69, 0x00030005, 0x0000001f, 0x00000000, 0x00050005, 0x00000033, 0x4374756f,
	0x726f6c6f, 0x00000000, 0x00040005, 0x00000035, 0x6f6c6f43, 0x00000072, 0x00040048, 0x0000000b,
	0x00000000, 0x00000005, 0x00050048, 0x0000000b, 0x00000000, 0x00000023, 0x00000000, 0x00050048,
	0x0000000b, 0x00000000, 0x00000007, 0x00000010, 0x00030047, 0x0000000b, 0x00000002, 0x00040047,
	0x00000015, 0x0000001e, 0x00000000, 0x00050048, 0x0000001d, 0x00000000, 0x0000000b, 0x00000000,
	0x00030047, 0x0000001d, 0x00000002, 0x00040047, 0x00000033, 0x0000001e, 0x00000000, 0x00040047,
	0x00000035, 0x0000001e, 0x00000001, 0x00020013, 0x00000002, 0x00030021, 0x00000003, 0x00000002,
	0x00030016, 0x00000006, 0x00000020, 0x00040017, 0x00000007, 0x00000006, 0x00000003, 0x00040020,
	0x00000008, 0x00000007, 0x00000007, 0x00040018, 0x0000000a, 0x00000007, 0x00000003, 0x0003001e,
	0x0000000b, 0x0000000a, 0x00040020, 0x0000000c, 0x00000009, 0x0000000b, 0x0004003b, 0x0000000c,
	0x0000000d, 0x00000009, 0x00040015, 0x0000000e, 0x00000020, 0x00000001, 0x0004002b, 0x0000000e,
	0x0000000f, 0x00000000, 0x00040020, 0x00000010, 0x00000009, 0x0000000a, 0x00040017, 0x00000013,
	0x00000006, 0x00000002, 0x00040020, 0x00000014, 0x00000001, 0x00000013, 0x0004003b, 0x00000014,
	0x00000015, 0x00000001, 0x0004002b, 0x00000006, 0x00000017, 0x3f800000, 0x00040017, 0x0000001c,
	0x00000006, 0x00000004, 0x0003001e, 0x0000001d, 0x0000001c, 0x00040020, 0x0000001e, 0x00000003,
	0x0000001d, 0x0004003b, 0x0000001e, 0x0000001f, 0x00000003, 0x00040015, 0x00000020, 0x00000020,
	0x00000000, 0x0004002b, 0x00000020, 0x00000021, 0x00000000, 0x00040020, 0x00000022, 0x00000007,
	0x00000006, 0x0004002b, 0x00000020, 0x00000025, 0x00000002, 0x0004002b, 0x00000020, 0x00000029,
	0x00000001, 0x0004002b, 0x00000006, 0x0000002f, 0x00000000, 0x00040020, 0x00000031, 0x00000003,
	0x0000001c, 0x0004003b, 0x00000031, 0x00000033, 0x00000003, 0x00040020, 0x00000034, 0x00000001,
	0x0000001c, 0x0004003b, 0x00000034, 0x00000035, 0x00000001, 0x00050036, 0x00000002, 0x00000004,
	0x00000000, 0x00000003, 0x000200f8, 0x00000005, 0x0004003b, 0x00000008, 0x00000009, 0x00000007,
	0x00050041, 0x00000010, 0x00000011, 0x0000000d, 0x0000000f, 0x0004003d, 0x0000000a, 0x00000012,
	0x00000011, 0x0004003d, 0x00000013, 0x00000016, 0x00000015, 0x00050051, 0x00000006, 0x00000018,
	0x00000016, 0x00000000, 0x00050051, 0x00000006, 0x00000019, 0x00000016, 0x00000001, 0x00060050,
	0x00000007, 0x0000001a, 0x00000018, 0x00000019, 0x00000017, 0x00050091, 0x00000007, 0x0000001b,
	0x00000012, 0x0000001a, 0x0003003e, 0x00000009, 0x0000001b, 0x00050041, 0x00000022, 0x00000023,
	0x00000009, 0x00000021, 0x0004003d, 0x00000006, 0x00000024, 0x00000023, 0x00050041, 0x00000022,
	0x00000026, 0x00000009, 0x00000025, 0x0004003d, 0x00000006, 0x00000027, 0x00000026, 0x00050088,
	0x00000006, 0x00000028, 0x00000024, 0x00000027, 0x00050041, 0x00000022, 0x0000002a, 0x00000009,
	0x00000029, 0x0004003d, 0x00000006, 0x0000002b, 0x0000002a, 0x00050041, 0x00000022, 0x0000002c,
	0x00000009, 0x00000025, 0x0004003d, 0x00000006, 0x0000002d, 0x0000002c, 0x00050088, 0x00000006,
	0x0000002e, 0x0000002b, 0x0000002d, 0x00070050, 0x0000001c, 0x00000030, 0x00000028, 0x0000002e,
	0x0000002f, 0x00000017, 0x00050041, 0x00000031, 0x00000032, 0x0000001f, 0x0000000f, 0x0003003e,
	0x00000032, 0x00000030, 0x0004003d, 0x0000001c, 0x00000036, 0x00000035, 0x0003003e, 0x00000033,
	0x00000036, 0x000100fd, 0x00010038
};

/*
#version 450 core

layout(location = 0) in vec4 Color;
layout(location = 0) out vec4 fColor;

void main()
{
	fColor = Color;
}
*/
static const uint32_t __glsl_shader1_frag_spv[] =
{
	0x07230203,0x00010000,0x0008000b,0x0000000d,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000b,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00040005,0x00000009,0x6c6f4366,0x0000726f,0x00040005,0x0000000b,0x6f6c6f43,
	0x00000072,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000b,0x0000001e,
	0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
	0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,
	0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00040020,0x0000000a,0x00000001,
	0x00000007,0x0004003b,0x0000000a,0x0000000b,0x00000001,0x00050036,0x00000002,0x00000004,
	0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x00000007,0x0000000c,0x0000000b,
	0x0003003e,0x00000009,0x0000000c,0x000100fd,0x00010038
};

/*
#version 450 core

layout(push_constant) uniform PushConstant { 
	mat3x3 transform;
	vec4 color;
	vec2 vertex[4];
	vec2 uv[4];
} pc;

out gl_PerVertex { vec4 gl_Position; };
layout(location = 0) out struct { vec4 Color; vec2 UV; } Out;

const int indicies[] = { 0, 1, 2, 0, 2, 3 };

void main()
{
	int index = indicies[GL_VertexID];

	vec3 vert   = pc.transform * vec3(pc.vertex[index], 1);
	gl_Position = vec4(vert.x / vert.z, vert.y / vert.z, 0, 1);

	Out.Color = pc.color;
	Out.UV    = pc.uv[index];
}
*/
static const uint32_t __glsl_shader2_vert_spv[] =
{
	0x07230203,0x00010000,0x0008000b,0x00000052,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0008000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x00000012,0x00000033,0x00000048,
	0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,0x00000000,0x00040005,
	0x00000008,0x65646e69,0x00000078,0x00060005,0x00000012,0x565f6c67,0x65747265,0x646e4978,
	0x00007865,0x00050005,0x00000015,0x65646e69,0x6c626178,0x00000065,0x00040005,0x0000001b,
	0x74726576,0x00000000,0x00060005,0x00000022,0x68737550,0x736e6f43,0x746e6174,0x00000000,
	0x00060006,0x00000022,0x00000000,0x6e617274,0x726f6673,0x0000006d,0x00050006,0x00000022,
	0x00000001,0x6f6c6f63,0x00000072,0x00050006,0x00000022,0x00000002,0x74726576,0x00007865,
	0x00040006,0x00000022,0x00000003,0x00007675,0x00030005,0x00000024,0x00006370,0x00060005,
	0x00000031,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x00000031,0x00000000,
	0x505f6c67,0x7469736f,0x006e6f69,0x00030005,0x00000033,0x00000000,0x00030005,0x00000046,
	0x00000000,0x00050006,0x00000046,0x00000000,0x6f6c6f43,0x00000072,0x00040006,0x00000046,
	0x00000001,0x00005655,0x00030005,0x00000048,0x0074754f,0x00040047,0x00000012,0x0000000b,
	0x0000002a,0x00040047,0x00000020,0x00000006,0x00000008,0x00040047,0x00000021,0x00000006,
	0x00000008,0x00040048,0x00000022,0x00000000,0x00000005,0x00050048,0x00000022,0x00000000,
	0x00000023,0x00000000,0x00050048,0x00000022,0x00000000,0x00000007,0x00000010,0x00050048,
	0x00000022,0x00000001,0x00000023,0x00000030,0x00050048,0x00000022,0x00000002,0x00000023,
	0x00000040,0x00050048,0x00000022,0x00000003,0x00000023,0x00000060,0x00030047,0x00000022,
	0x00000002,0x00050048,0x00000031,0x00000000,0x0000000b,0x00000000,0x00030047,0x00000031,
	0x00000002,0x00040047,0x00000048,0x0000001e,0x00000000,0x00020013,0x00000002,0x00030021,
	0x00000003,0x00000002,0x00040015,0x00000006,0x00000020,0x00000001,0x00040020,0x00000007,
	0x00000007,0x00000006,0x00040015,0x00000009,0x00000020,0x00000000,0x0004002b,0x00000009,
	0x0000000a,0x00000006,0x0004001c,0x0000000b,0x00000006,0x0000000a,0x0004002b,0x00000006,
	0x0000000c,0x00000000,0x0004002b,0x00000006,0x0000000d,0x00000001,0x0004002b,0x00000006,
	0x0000000e,0x00000002,0x0004002b,0x00000006,0x0000000f,0x00000003,0x0009002c,0x0000000b,
	0x00000010,0x0000000c,0x0000000d,0x0000000e,0x0000000c,0x0000000e,0x0000000f,0x00040020,
	0x00000011,0x00000001,0x00000006,0x0004003b,0x00000011,0x00000012,0x00000001,0x00040020,
	0x00000014,0x00000007,0x0000000b,0x00030016,0x00000018,0x00000020,0x00040017,0x00000019,
	0x00000018,0x00000003,0x00040020,0x0000001a,0x00000007,0x00000019,0x00040018,0x0000001c,
	0x00000019,0x00000003,0x00040017,0x0000001d,0x00000018,0x00000004,0x00040017,0x0000001e,
	0x00000018,0x00000002,0x0004002b,0x00000009,0x0000001f,0x00000004,0x0004001c,0x00000020,
	0x0000001e,0x0000001f,0x0004001c,0x00000021,0x0000001e,0x0000001f,0x0006001e,0x00000022,
	0x0000001c,0x0000001d,0x00000020,0x00000021,0x00040020,0x00000023,0x00000009,0x00000022,
	0x0004003b,0x00000023,0x00000024,0x00000009,0x00040020,0x00000025,0x00000009,0x0000001c,
	0x00040020,0x00000029,0x00000009,0x0000001e,0x0004002b,0x00000018,0x0000002c,0x3f800000,
	0x0003001e,0x00000031,0x0000001d,0x00040020,0x00000032,0x00000003,0x00000031,0x0004003b,
	0x00000032,0x00000033,0x00000003,0x0004002b,0x00000009,0x00000034,0x00000000,0x00040020,
	0x00000035,0x00000007,0x00000018,0x0004002b,0x00000009,0x00000038,0x00000002,0x0004002b,
	0x00000009,0x0000003c,0x00000001,0x0004002b,0x00000018,0x00000042,0x00000000,0x00040020,
	0x00000044,0x00000003,0x0000001d,0x0004001e,0x00000046,0x0000001d,0x0000001e,0x00040020,
	0x00000047,0x00000003,0x00000046,0x0004003b,0x00000047,0x00000048,0x00000003,0x00040020,
	0x00000049,0x00000009,0x0000001d,0x00040020,0x00000050,0x00000003,0x0000001e,0x00050036,
	0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003b,0x00000007,
	0x00000008,0x00000007,0x0004003b,0x00000014,0x00000015,0x00000007,0x0004003b,0x0000001a,
	0x0000001b,0x00000007,0x0004003d,0x00000006,0x00000013,0x00000012,0x0003003e,0x00000015,
	0x00000010,0x00050041,0x00000007,0x00000016,0x00000015,0x00000013,0x0004003d,0x00000006,
	0x00000017,0x00000016,0x0003003e,0x00000008,0x00000017,0x00050041,0x00000025,0x00000026,
	0x00000024,0x0000000c,0x0004003d,0x0000001c,0x00000027,0x00000026,0x0004003d,0x00000006,
	0x00000028,0x00000008,0x00060041,0x00000029,0x0000002a,0x00000024,0x0000000e,0x00000028,
	0x0004003d,0x0000001e,0x0000002b,0x0000002a,0x00050051,0x00000018,0x0000002d,0x0000002b,
	0x00000000,0x00050051,0x00000018,0x0000002e,0x0000002b,0x00000001,0x00060050,0x00000019,
	0x0000002f,0x0000002d,0x0000002e,0x0000002c,0x00050091,0x00000019,0x00000030,0x00000027,
	0x0000002f,0x0003003e,0x0000001b,0x00000030,0x00050041,0x00000035,0x00000036,0x0000001b,
	0x00000034,0x0004003d,0x00000018,0x00000037,0x00000036,0x00050041,0x00000035,0x00000039,
	0x0000001b,0x00000038,0x0004003d,0x00000018,0x0000003a,0x00000039,0x00050088,0x00000018,
	0x0000003b,0x00000037,0x0000003a,0x00050041,0x00000035,0x0000003d,0x0000001b,0x0000003c,
	0x0004003d,0x00000018,0x0000003e,0x0000003d,0x00050041,0x00000035,0x0000003f,0x0000001b,
	0x00000038,0x0004003d,0x00000018,0x00000040,0x0000003f,0x00050088,0x00000018,0x00000041,
	0x0000003e,0x00000040,0x00070050,0x0000001d,0x00000043,0x0000003b,0x00000041,0x00000042,
	0x0000002c,0x00050041,0x00000044,0x00000045,0x00000033,0x0000000c,0x0003003e,0x00000045,
	0x00000043,0x00050041,0x00000049,0x0000004a,0x00000024,0x0000000d,0x0004003d,0x0000001d,
	0x0000004b,0x0000004a,0x00050041,0x00000044,0x0000004c,0x00000048,0x0000000c,0x0003003e,
	0x0000004c,0x0000004b,0x0004003d,0x00000006,0x0000004d,0x00000008,0x00060041,0x00000029,
	0x0000004e,0x00000024,0x0000000f,0x0000004d,0x0004003d,0x0000001e,0x0000004f,0x0000004e,
	0x00050041,0x00000050,0x00000051,0x00000048,0x0000000d,0x0003003e,0x00000051,0x0000004f,
	0x000100fd,0x00010038
};

/*
#version 450 core

layout(location = 0) out vec4 fColor;
layout(set=0, binding=0) uniform sampler2D sTexture;
layout(location = 0) in struct { vec4 Color; vec2 UV; } In;

void main()
{
	fColor = In.Color * texture(sTexture, In.UV.st);
}
*/
static const uint32_t __glsl_shader2_frag_spv[] =
{
	0x07230203,0x00010000,0x0008000b,0x0000001e,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000d,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00040005,0x00000009,0x6c6f4366,0x0000726f,0x00030005,0x0000000b,0x00000000,
	0x00050006,0x0000000b,0x00000000,0x6f6c6f43,0x00000072,0x00040006,0x0000000b,0x00000001,
	0x00005655,0x00030005,0x0000000d,0x00006e49,0x00050005,0x00000016,0x78655473,0x65727574,
	0x00000000,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000d,0x0000001e,
	0x00000000,0x00040047,0x00000016,0x00000022,0x00000000,0x00040047,0x00000016,0x00000021,
	0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
	0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,
	0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00040017,0x0000000a,0x00000006,
	0x00000002,0x0004001e,0x0000000b,0x00000007,0x0000000a,0x00040020,0x0000000c,0x00000001,
	0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000001,0x00040015,0x0000000e,0x00000020,
	0x00000001,0x0004002b,0x0000000e,0x0000000f,0x00000000,0x00040020,0x00000010,0x00000001,
	0x00000007,0x00090019,0x00000013,0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,
	0x00000001,0x00000000,0x0003001b,0x00000014,0x00000013,0x00040020,0x00000015,0x00000000,
	0x00000014,0x0004003b,0x00000015,0x00000016,0x00000000,0x0004002b,0x0000000e,0x00000018,
	0x00000001,0x00040020,0x00000019,0x00000001,0x0000000a,0x00050036,0x00000002,0x00000004,
	0x00000000,0x00000003,0x000200f8,0x00000005,0x00050041,0x00000010,0x00000011,0x0000000d,
	0x0000000f,0x0004003d,0x00000007,0x00000012,0x00000011,0x0004003d,0x00000014,0x00000017,
	0x00000016,0x00050041,0x00000019,0x0000001a,0x0000000d,0x00000018,0x0004003d,0x0000000a,
	0x0000001b,0x0000001a,0x00050057,0x00000007,0x0000001c,0x00000017,0x0000001b,0x00050085,
	0x00000007,0x0000001d,0x00000012,0x0000001c,0x0003003e,0x00000009,0x0000001d,0x000100fd,
	0x00010038
};

VKDL_BEGIN

void registerBuiltinRenderpass(UUID uuid)
{
	auto& ctx = Context::get();

	if (ctx.hasRenderPass(uuid)) return;

	if (uuid == VKDL_BUILTIN_RENDERPASS0_UUID) { // renderpass0
		auto render_pass = RenderPassBuilder()
			.setAttachmentFormat(vk::Format::eR8G8B8A8Unorm)
			.setAttachmentSampleCount(vk::SampleCountFlagBits::e1)
			.setAttachmentLoadOp(vk::AttachmentLoadOp::eClear)
			.setAttachmentStoreOp(vk::AttachmentStoreOp::eStore)
			.setAttachmentStencilLoadOp(vk::AttachmentLoadOp::eDontCare)
			.setAttachmentStencilStoreOp(vk::AttachmentStoreOp::eDontCare)
			.setAttachmentInitialLayout(vk::ImageLayout::eUndefined)
			.setAttachmentFinalLayout(vk::ImageLayout::ePresentSrcKHR)
			.pushCurrentAttachment()

			.setSubpassPipelineBindPoint(vk::PipelineBindPoint::eGraphics)
			.addSubpassColorAttachment(0, vk::ImageLayout::eColorAttachmentOptimal)
			.pushCurrentSubpass()

			.build();

		ctx.registerRenderPass(VKDL_BUILTIN_RENDERPASS0_UUID, render_pass);
	}
}

void registerBuiltinPipeline(UUID uuid)
{
	auto& ctx = Context::get();

	if (ctx.hasPipeline(uuid)) return;

	auto descriptor_set_layout = DescriptorSetLayoutBuilder()
		.setShaderStage(vk::ShaderStageFlagBits::eFragment)
		.setBinding(0)
		.setDescriptorType(vk::DescriptorType::eCombinedImageSampler)
		.addSampler(nullptr)
		.pushCurrentBinding()
		.build();

	if (uuid == VKDL_BUILTIN_PIPELINE0_UUID) { // pipeline0
		auto vert_module = ShaderModule::loadFromMemory(__glsl_shader0_vert_spv, sizeof(__glsl_shader0_vert_spv));
		auto frag_module = ShaderModule::loadFromMemory(__glsl_shader0_frag_spv, sizeof(__glsl_shader0_frag_spv));

		auto pipeline_layout = PipelineLayoutBuilder()
			.addPushConstant(vk::ShaderStageFlagBits::eVertex, 0, sizeof(Transform2D) + sizeof(vec2))
			.addDescriptorSetLayout(descriptor_set_layout)
			.build();

		auto pipeline = PipelineBuilder()
			.addShaderStage(vert_module, vert_module->makeShaderStageCreateInfo(vk::ShaderStageFlagBits::eVertex))
			.addShaderStage(frag_module, frag_module->makeShaderStageCreateInfo(vk::ShaderStageFlagBits::eFragment))
			.addVertexInput(0, sizeof(Vertex2D))
			.addVertexInputAtrribute(0, 0, vk::Format::eR32G32Sfloat, offsetof(Vertex2D, pos))
			.addVertexInputAtrribute(0, 1, vk::Format::eR32G32Sfloat, offsetof(Vertex2D, uv))
			.addVertexInputAtrribute(0, 2, vk::Format::eR8G8B8A8Unorm, offsetof(Vertex2D, col))

			.setPrimitiveTopology(vk::PrimitiveTopology::eTriangleList)
			.setBlendLogicOp(vk::LogicOp::eClear)

			.enableBlend()
			.setColorBlend(vk::BlendFactor::eSrcAlpha, vk::BlendFactor::eOneMinusSrcAlpha, vk::BlendOp::eAdd)
			.setAlphaBlend(vk::BlendFactor::eOne, vk::BlendFactor::eOneMinusSrcAlpha, vk::BlendOp::eAdd)
			.setColorWriteMask(true, true, true, true)
			.pushCurrentColorBlendAttachmentState()

			.addDynamicState(vk::DynamicState::eViewport)
			.addDynamicState(vk::DynamicState::eScissor)
			.setPipelineLayout(pipeline_layout)
			.setRenderPass(ctx.render_passes[VKDL_BUILTIN_RENDERPASS0_UUID])
			.build();

		ctx.registerPipeline(VKDL_BUILTIN_PIPELINE0_UUID, pipeline);
	}

	if (uuid == VKDL_BUILTIN_PIPELINE1_UUID) { // pipeline0
		auto vert_module = ShaderModule::loadFromMemory(__glsl_shader1_vert_spv, sizeof(__glsl_shader1_vert_spv));
		auto frag_module = ShaderModule::loadFromMemory(__glsl_shader1_frag_spv, sizeof(__glsl_shader1_frag_spv));

		auto pipeline_layout = PipelineLayoutBuilder()
			.addPushConstant(vk::ShaderStageFlagBits::eVertex, 0, sizeof(Transform2D))
			.build();

		auto pipeline = PipelineBuilder()
			.addShaderStage(vert_module, vert_module->makeShaderStageCreateInfo(vk::ShaderStageFlagBits::eVertex))
			.addShaderStage(frag_module, frag_module->makeShaderStageCreateInfo(vk::ShaderStageFlagBits::eFragment))
			.addVertexInput(0, sizeof(Vertex2D))
			.addVertexInputAtrribute(0, 0, vk::Format::eR32G32Sfloat, offsetof(Vertex2D, pos))
			.addVertexInputAtrribute(0, 1, vk::Format::eR8G8B8A8Unorm, offsetof(Vertex2D, col))

			.setPrimitiveTopology(vk::PrimitiveTopology::eTriangleList)
			.setBlendLogicOp(vk::LogicOp::eClear)

			.enableBlend()
			.setColorBlend(vk::BlendFactor::eSrcAlpha, vk::BlendFactor::eOneMinusSrcAlpha, vk::BlendOp::eAdd)
			.setAlphaBlend(vk::BlendFactor::eOne, vk::BlendFactor::eOneMinusSrcAlpha, vk::BlendOp::eAdd)
			.setColorWriteMask(true, true, true, true)
			.pushCurrentColorBlendAttachmentState()

			.addDynamicState(vk::DynamicState::eViewport)
			.addDynamicState(vk::DynamicState::eScissor)
			.setPipelineLayout(pipeline_layout)
			.setRenderPass(ctx.render_passes[VKDL_BUILTIN_RENDERPASS0_UUID])
			.build();

		ctx.registerPipeline(VKDL_BUILTIN_PIPELINE1_UUID, pipeline);
	}

	if (uuid == VKDL_BUILTIN_PIPELINE2_UUID) { // pipeline2
		auto vert_module = ShaderModule::loadFromMemory(__glsl_shader2_vert_spv, sizeof(__glsl_shader2_vert_spv));
		auto frag_module = ShaderModule::loadFromMemory(__glsl_shader2_frag_spv, sizeof(__glsl_shader2_frag_spv));

		auto pipeline_layout = PipelineLayoutBuilder()
			.addPushConstant(vk::ShaderStageFlagBits::eVertex, 0, 
				sizeof(Transform2D) +
				sizeof(Color) +
				sizeof(vec4) +
				sizeof(vec2[8]))
			.addDescriptorSetLayout(descriptor_set_layout)
			.build();

		auto pipeline = PipelineBuilder()
			.addShaderStage(vert_module, vert_module->makeShaderStageCreateInfo(vk::ShaderStageFlagBits::eVertex))
			.addShaderStage(frag_module, frag_module->makeShaderStageCreateInfo(vk::ShaderStageFlagBits::eFragment))

			.setPrimitiveTopology(vk::PrimitiveTopology::eTriangleList)
			.setBlendLogicOp(vk::LogicOp::eClear)

			.enableBlend()
			.setColorBlend(vk::BlendFactor::eSrcAlpha, vk::BlendFactor::eOneMinusSrcAlpha, vk::BlendOp::eAdd)
			.setAlphaBlend(vk::BlendFactor::eOne, vk::BlendFactor::eOneMinusSrcAlpha, vk::BlendOp::eAdd)
			.setColorWriteMask(true, true, true, true)
			.pushCurrentColorBlendAttachmentState()

			.addDynamicState(vk::DynamicState::eViewport)
			.addDynamicState(vk::DynamicState::eScissor)
			.setPipelineLayout(pipeline_layout)
			.setRenderPass(ctx.render_passes[VKDL_BUILTIN_RENDERPASS0_UUID])
			.build();

		ctx.registerPipeline(VKDL_BUILTIN_PIPELINE2_UUID, pipeline);
	}
}

VKDL_END